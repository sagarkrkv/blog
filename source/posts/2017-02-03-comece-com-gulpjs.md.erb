---
title: "Cloud Agnostic Load Balancing and High Availability of Microservices"
presentation: ‚ÄúDeveloping an architecture that is highly availa‚Äù
description: "Comparing "
date: 2017-02-03 17:52
comments: true
image: /assets/images/posts/2015/08/meu-ambiente-gulpjs.png
categories:
 - Spring 17
tags:
 - Airavata
 - API Server
 - Theme 1
---

Microservices architecture is geared towards horizontal scalability, where new instances are spawned/removed to
dynamically respond to changes in demand and/or failures to ensure High Availabilty of the system as a whole.

In this constantly changing environment we need some fault tolerant mechanism to ensure a client is aware of
the network location viz., IP address and port number of these instances.

<div class="image">
  <%= image_tag '/assets/images/posts/2017/02/service-discovery-1.png', alt: 'dynamically scaled microservices' %>
  <a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/">Image Source</a>
</div>


##Source Registry
Here a service registry plays a key role, as it constantly keeps track of the available services.The network location of a service instance is registered with the service registry when it starts up. It is removed from the service registry when the instance terminates. The service instance‚Äôs registration is typically refreshed periodically using a heartbeat mechanism.


<div class="image">
  <%= image_tag '/assets/images/posts/2017/02/service-discovery-2.png', alt: 'service registry for dynamically scaled microservices' %>
  <%= link_to 'Image Source', 'https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/' %>
</div>


## Consul as Service Registry

The popular service registries are <%= link_to 'Consul','https://www.consul.io' %>,
<%= link_to 'Zookeeper','https://zookeeper.apache.org/'%>, and<%= link_to 'ETCD','https://coreos.com/etcd' %>. We choose
Consul for two primary reasons, multi-datacenter support and inbuilt servive discovery.

Multi-Datacenter support allows us to spread service instances across multiple cloud providers and availabilty zones.
Inbuilt Service Discovery allows clients to directly discover services directly using a DNS or HTTP interface.

More details on Consul's multi-datacenter architecture can be accessed <%= link_to 'here', 'https://www.consul.io/docs/internals/architecture.html'%>.

<div class="image">
  <%= image_tag '/assets/images/posts/2017/02/Instance.png', alt: 'architecture inside cloud instance' %>
</div>


Com apenas um comando voc√™ consegue:

 * Fazer a compress√£o de centenas de imagens de um projeto antigo (eu precisei fazer isso);
 * Deploy para qualquer servidor sftp, ssh ou at√© mesmo para amazon S3;
 * Fazer Watch de pr√©-processadores e template engines;
 * Subir servidores locais de qualquer linguagem;
 * Executar os testes do seu projeto;
 * Executar tarefas complexas em segundos;
 * ... e ter mais tempo para tomar um caf√©.

E ai gostou? Ainda tem mais vantagens que n√£o foram listadas acima, essas s√£o as que eu mais gosto de citar quando me perguntam quais as vantagens de um Task Runner.

Eu sempre gosto de dizer: "Ele me faz ter mais tempo para o meu caf√©".

## Porque eu deveria usar o GulpJS?

O **Gulp** te d√° todas as vantagens que citei no bloco anterior, al√©m de:

 * Ser super-r√°pido. Performance com certeza √© uma vantagem grande do Gulpjs;
 * Simples e f√°cil de implementar. Ele √© simples e direto, com certeza voc√™ vai gostar;
 * Quantidade enorme de plugins em seu reposit√≥rio. O que voc√™ imaginar o Gulp tem um componente para isso.
 * ... e muito mais.

> "gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something."

Essa frase acima est√° na homepage do gulp, ela te d√° um breve _overview_ do que voc√™ ir√° encontrar se come√ßar a se aventurar com ele.

## Instala√ß√£o e configura√ß√£o do Gulp

Vamos criar um projeto simples, apenas para executar algumas tarefas com Gulp, o nome do projeto ser√° [Comece com gulp](https://github.com/nandomoreirame/comece-com-gulp), e claro, ele t√° l√° no Github.

üòé

Instale o Gulp global com o comando: `npm install -g gulp-cli`.

**PS. em alguns sistemas operacionais, se voc√™ n√£o estiver usando [NVM](https://github.com/creationix/nvm) para gerenciar suas vers√µes do nodejs, voc√™ precisar√° executar o comando com SUDO.**

Inicie o projeto npm com o comando: `npm init`

<div class="image">
  <%= image_tag '/assets/images/posts/2017/01/comece-com-gulp-npm-init.png', alt: 'Image do terminal: comando npm init' %>
</div>

Esse comando ir√° criar um arquivo chamado **package.json**, com ele voc√™ gerencia todos os pacotes e depend√™ncias do seu projeto.

O meu **package.json** ficou mais ou menos assim:

```json
{
  "name": "comece-com-gulp",
  "version": "1.0.0",
  "description": "> Reposit√≥rio do artigo: http://nandomoreira.me/comece-com-gulpjs/",
  "main": "gulpfile.js",
  "dependencies": {
    "gulp": "^3.9.1"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nandomoreirame/comece-com-gulp.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/nandomoreirame/comece-com-gulp/issues"
  },
  "homepage": "https://github.com/nandomoreirame/comece-com-gulp#readme"
}
```

Instale o Gulp local com o comando: `npm install --save-dev gulp`

Voc√™ vai notar que na linha onde tinha `"devDependencies": {},` foi adicionado o gulp.

```json
"devDependencies": {
  "gulp": "^3.9.1"
},
```

O gulp agora faz parte das depend√™ncias de dev do seu projeto, assim como os m√≥dulos que iremos instalar para ajudar na execu√ß√£o das tarefas.

## Hello World com Gulp

Dentro do projeto temos o arquivo **package.json** e o diret√≥rio **node_modules/** onde est√° instalado o Gulp local.

Vamos criar o arquivo chamado **gulpfile.js**, que √© obrigat√≥rio para criarmos as tarefas do Gulp.

```
touch gulpfile.js
```

Nesse arquivo vamos requirir o Gulp usando [ComomJS](https://pt.wikipedia.org/wiki/CommonJS): `require('gulp');`.

```javascript
'use strict';

var gulp = require('gulp');
```

Na primeira linha temos o `'use strict'`, se voc√™ n√£o sabe para que serve o **'use strict'** eu indico assistir a palestra de [Javascript Secrets](https://youtu.be/7Ur9zN2vMcs?t=1m7s) do Fernando Daciuk, muito legal. J√° na segunda linha criamos uma vari√°vel chamada **gulp**, a qual iremos usar muito por todo nosso c√≥digo.

Vamos ao Hello World.

```javascript
'use strict';

var gulp = require('gulp');

gulp.task('hello', function() {
  console.log('Hello World.');
});
```

Basta rodar o comando: `gulp hello` no seu terminal que a m√°gica vai acontecer.

<div class="image">
  <%= image_tag '/assets/images/posts/2017/01/comece-com-gulp-hello.png', alt: 'Imagem do terminal: commando gulp hello' %>
</div>

## Comandos

Voc√™ pode obter a lista de comandos do Gulp apenas digitando o commando: `gulp --help` no terminal.

<div class="image">
  <%= image_tag '/assets/images/posts/2017/01/comece-com-gulp-help.png', alt: 'Imagem do terminal: commando gulp --help' %>
</div>

Um comando bem interessante √© o que lista todas as tasks do projeto: `gulp --tasks`

<div class="image">
  <%= image_tag '/assets/images/posts/2017/01/comece-com-gulp-tasks.png', alt: 'Imagem do terminal: commando gulp --tasks' %>
</div>

---

## Concluindo..

Esse foi apenas o primeiro passo para voc√™ come√ßar com Gulpjs, vai por mim, tem muitas coisas legais que da pra fazer com uma task do gulp.

Espero que tenha gostado do artigo, √© simples mas √∫til.

Logo mais vou fazer outro artigo um pouco mais avan√ßado para voc√™ ir mais al√©m com ele.

At√© breve.

/end

---
